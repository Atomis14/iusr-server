// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  email       String    @unique
  password    String
  isAdmin     Boolean   @default(false)

  firstName   String?
  lastName    String?

  courses     Course[]  // user has many courses
  chapters    Chapter[] // user can create many chapters
  lessons     Lesson[]

  @@map("users")  // map User model to users table in DB
}

model Course {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  title       String
  description String?

  creatorId   Int
  creator     User      @relation(fields: [creatorId], references: [id])   // course belongs to only one user (=creator), stores reference in column creatorId and references column id from User

  chapters    Chapter[]

  @@map("courses")
}

model Chapter {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  title       String
  description String?
  position    Int       // order of the chapters inside a course

  creatorId   Int
  creator     User      @relation(fields: [creatorId], references: [id])

  courseId    Int
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)  // cascade: if course is deleted, its chapters are too

  lessons     Lesson[]

  @@unique([position, courseId])   // inside a course chapter-positions are unique
  @@map("chapters")
}

model Lesson {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  title       String
  lang        String?   // programming language in code editor
  task        String?   // richtext editor task description
  code        String?   // code editor default code
  position    Int       // order of the lesson inside a chapter

  creatorId   Int
  creator     User      @relation(fields: [creatorId], references: [id])

  chapterId   Int
  chapter     Chapter   @relation(fields: [chapterId], references: [id], onDelete: Cascade) // cascade: if chapter is deleted, its lessons are too

  @@unique([position, chapterId])   // inside a chapter lesson-positions are unique
  @@map("lessons")
}